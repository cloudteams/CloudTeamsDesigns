 @mixin breakpoint($point) {
   @if $point == desktop {
     @media (min-width: 75em) { @content ; }
  }
   @else if $point == laptop {
     @media (max-width: 75em) { @content ; }
  }
    @else if $point == tablet {
     @media (max-width: 62em) { @content ; }
  }
   @else if $point == phablet {
     @media (max-width: 48em)  { @content ; }
  }
  @else if $point == mobileonly {
     @media (max-width: 34em)  { @content ; }
  }
}

@mixin antialiasText($arguments: antialiased) {
	-webkit-font-smoothing: $arguments;
	-moz-font-smoothing: $arguments;
	-ms-font-smoothing: $arguments;
	font-smoothing: $arguments;
}

@mixin disableSelection() {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

// Transition mixin
@mixin useTransition($time, $transition) {
	-webkit-transition: all $time $transition;
	-moz-transition: all $time $transition;
	-o-transition: all $time $transition;
	transition: all $time $transition; /* linear */
}

// Transform mixin
@mixin useTransform($transform) {
	-webkit-transform: $transform; /* Ch <36, Saf 5.1+, iOS, An =<4.4.4 */
	-ms-transform: $transform; /* IE 9 */
	transform: $transform; /* IE 10, Fx 16+, Op 12.1+ */
}

// Bottom dash/border mixin
@mixin makeBottomDash($background, $height, $width, $left, $bottom) {
	&:after {
		background: $background;
		bottom: $bottom;
		content: "";
		height: $height;
		left: $left;
		position: absolute;
		width: $width;
	}
}

// Top dash/border mixin
@mixin makeTopDash($background, $height, $width, $left, $top) {
	&:before {
		background: $background;
		content: "";
		height: $height;
		left: $left;
		position: absolute;
		top: $top;
		width: $width;
	}
}

// Inner dash/border mixin
@mixin makeInnerDash($background, $height, $width, $right, $top) {
	&:before {
		background: $background;
		content: "";
		height: $height;
		position: absolute;
		right: $right;
		top: $top;
		width: $width;
	}
}

// Angle right
@mixin makeAngleDown($color, $content, $right, $top) {
	&:before {
		color: $color;
		content: $content;
		height: 23px;
		position: absolute;
		right: $right;
		top: $top;
		width: 15px;
	}
}

// Left dash/border mixin
@mixin makeLeftDash($background, $height, $width, $left, $top) {
	&:after {
		background: $background;
		content: "";
		height: $height;
		left: $left;
		position: absolute;
		top: $top;
		width: $width;
	}
}

@mixin makeColorOverlay($background, $opacity) {
	&:before {
		background: $background;
		content: "";
		height: 100%;
		left: 0;
		opacity: $opacity;
		position: absolute;
		top: 0;
		width: 100%;
	}
}

@mixin horizontalAlign($width) {
	&:before, &:after {
		left: 50%;
		margin-left: -$width * 0.5;
	}
}

@mixin placeholderColor($color, $weight) {
	&::-webkit-input-placeholder {
		color: $color;
		font-weight: $weight;
	}
	&::-moz-placeholder {
		color: $color;
		font-weight: $weight;
		opacity:  1;
	}
	&:-ms-input-placeholder {
		color: $color;
		font-weight: $weight;
	}
}

@mixin createMargins($attr: margin, $slug: $margin-slug, $margins: $margins-presets, $current-margin: $margin-min, $max: $margin-max, $step: $margin-step, $positions: $margin-positions) {

	@while $current-margin <= $max {
		$margins: append($margins, $current-margin, 'comma');
		$current-margin: $current-margin + $step;
	}

	@each $margin in $margins {
		.#{$slug}-#{$margin / ($margin * 0 + 1)} {
			#{$attr}: $margin;
		}

		@each $position in $positions {
			.#{$slug}-#{$position}-#{$margin / ($margin * 0 + 1)} {
				@if $position == l or $position == h {
					#{$attr}-left: $margin;
				}
				@if $position == r or $position == h {
					#{$attr}-right: $margin;
				}
				@if $position == t or $position == v {
					#{$attr}-top: $margin;
				}
				@if $position == b or $position == v {
					#{$attr}-bottom: $margin;
				}
			}
		}
	}
}

@mixin createMargins2($attr: margin, $slug: $margin-slug, $margins: $margins-presets, $current-margin: $margin-min, $max: $margin-max, $step: $margin-step, $positions: $margin-positions) {

	@while $current-margin <= $max {
		$margins: append($margins, $current-margin, 'comma');
		$current-margin: $current-margin + $step;
	}

	@each $margin in $margins {
		%#{$slug}-#{$margin / ($margin * 0 + 1)} {
			#{$attr}: $margin;
		}

		@each $position in $positions {
			%#{$slug}-#{$position}-#{$margin / ($margin * 0 + 1)} {
				@if $position == l or $position == h {
					#{$attr}-left: $margin;
				}
				@if $position == r or $position == h {
					#{$attr}-right: $margin;
				}
				@if $position == t or $position == v {
					#{$attr}-top: $margin;
				}
				@if $position == b or $position == v {
					#{$attr}-bottom: $margin;
				}
			}
		}
	}
}

@mixin margin($margin: 0) {
	margin: #{$margin};
}

@mixin marginH($margin: 0) {
	margin-right: #{$margin};
	margin-left: #{$margin};
}

@mixin marginV($margin: 0) {
	margin-top: #{$margin};
	margin-bottom: #{$margin};
}

@mixin marginT($margin: 0) {
	margin-top: #{$margin};
}

@mixin marginB($margin: 0) {
	margin-bottom: #{$margin};
}

@mixin marginR($margin: 0) {
	margin-right: #{$margin};
}

@mixin marginL($margin: 0) {
	margin-left: #{$margin};
}

@mixin padding($padding: 0) {
	padding: #{$padding};
}

@mixin paddingH($padding: 0) {
	padding-right: #{$padding};
	padding-left: #{$padding};
}

@mixin paddingV($padding: 0) {
	padding-top: #{$padding};
	padding-bottom: #{$padding};
}

@mixin paddingT($padding: 0) {
	padding-top: #{$padding};
}

@mixin paddingB($padding: 0) {
	padding-bottom: #{$padding};
}

@mixin paddingR($padding: 0) {
	padding-right: #{$padding};
}

@mixin paddingL($padding: 0) {
	padding-left: #{$padding};
}